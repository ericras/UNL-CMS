<?php


require_once __DIR__ . '/git_include.crud.inc';

/**
 * Implements hook_ctools_plugin_directory().
 */
function git_include_ctools_plugin_directory($module, $type) {
  if ('export_ui' == $type) {
    return 'plugins/export_ui';
  }
}

/**
 * Implements hook_menu().
 */
function git_include_menu() {
  $items = array();

/*  $items['admin/config/development/git-include'] = array(
    'title' => 'Git include',
    'description' => 'Configure Git include.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_include_form'),
    'access arguments' => array('execute git include pull'),
  );*/
/*  $items['admin/config/development/git-include/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );*/

/*$items['admin/config/development/git-include/add'] = array(
    'title' => 'Add new repo',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_include_create', 'add'),
    'access arguments' => array('add new git include'),
    'type' => MENU_LOCAL_ACTION,
  );*/
  $items['admin/config/development/git-include/settings'] = array(
    'title' => 'Settings',
    'description' => 'Administer Git include settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('git_include_admin_settings_form'),
    'access arguments' => array('administer git include settings'),
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_permisson().
 */
function git_include_permission() {
  return array(
    'add new git include' => array(
      'title' => t('Add and clone new repositories'),
    ),
    'administer git include settings' => array(
      'title' => t('Administer Git Include settings'),
    ),
    'execute git include pull' => array(
      'title' => t('Run a repository pull'),
    ),
  );
}

/**
 * Form: Create New Site.
 *//*
function git_include_create($form, &$form_state) {
  $form['site_path'] = array(
    '#type' => 'textfield',
    '#title' => t('New site path'),
    '#description' => t('Relative url for the new site.'),
    '#default_value' => 'newsite',
    '#required' => TRUE,
  );
  $form['clean_url'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use clean URLs'),
    '#description' => t("Unless you have some reason to think your site won't support this, leave it checked."),
    '#default_value' => 1,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create site'),
  );
  return $form;
}

/**
 * Menu callback for list/configuring repos.
 *//*
function git_include_form() {

} */

/**
 * Menu callback for admin settings.
 */
function git_include_admin_settings_form() {
  $form = array();

  $form['git_include_directory'] = array(
    '#type' => 'textfield',
    '#title' => t('Directory'),
    '#default_value' => variable_get('git_include_dir', 'public://git_include'),
    '#required' => TRUE,
    '#description' => t('The location repositories will be cloned into.'),
  );

  return system_settings_form($form);
}

/**
 * Synchronizes two repositories.
 *
 * @param string $name
 *   The machine name of the sync routine.
 *
 * @throws \RuntimeException
 * @throws \UnexpectedValueException
 * @throws \InvalidArgumentException
 * @throws GitException
 */
function git_include($name) {
  if (!$repo = git_include_load($name)) {
    throw new Exception(t('Repository info not found: @name', array('@name' => $name)));
  }

  $dir = variable_get('git_include_dir', 'public://git_include');
  git_include_dir_init($dir);

  if (!$realpath = drupal_realpath($dir)) {
    throw new Exception(t('Error resolving directory: @dir', array('@dir' => $dir)));
  }

  $command = 'cd ' . $realpath . '/' . $repo->name . '; git rev-parse --show-toplevel;';
  $git_path = exec($command, $output, $return_var);

  $repopath = $realpath . '/' . $repo->name;

  if (strtolower($git_path) !== strtolower($repopath)) {
    $operation = 'clone';
    $command = 'git clone ' . $repo->options['source_repo'] . ' ' . $repopath;
  }
  else {
    $operation = 'pull';
    $command = 'cd ' . $repopath . '; git pull;';
  }

  ob_start();
  passthru($command, $return_var);
  $result = ob_get_contents();
  ob_end_clean();

  drupal_set_message($result, 'git_include');

  if (!is_int($return_var) || $return_var !== 0) {
    throw new Exception(t('Shell command returned with status @status: @command', array('@command' => $command, '@status' => $return_var)));
  }
  else {
    drupal_set_message(t('Git @op completed for @repo', array('@op' => $operation, '@repo' => $repo->options['label'])), 'status');
  }

  return $result;
}

/**
 * Initialize the directory containing the working copies.
 *
 * @param string $dir
 *   The base directory being initialized.
 */
function git_include_dir_init($dir) {
  if (!is_dir($dir)) {
    if (!drupal_mkdir($dir)) {
      throw new Exception(t('Error creating directory: @dir', array('@dir' => $dir)));
    }
    file_create_htaccess($dir, TRUE);
  }
}
